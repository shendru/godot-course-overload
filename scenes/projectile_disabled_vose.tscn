[gd_scene load_steps=10 format=3 uid="uid://ceteuksabt443"]

[ext_resource type="PackedScene" uid="uid://cg5ocn013f364" path="res://scenes/projectile.tscn" id="1_kyfj2"]
[ext_resource type="Texture2D" uid="uid://b1awr575ybu5s" path="res://misc/placeholder_texture_2d.tres" id="2_hd575"]

[sub_resource type="GDScript" id="GDScript_hd575"]
script/source = "extends ProjectileNode

var max_distance: float = 6000.0  # Adjust as needed
var source_position: Vector2  # Set this when spawning


#var projectile_node: PackedScene = preload(\"res://scenes/projectile_simple.tscn\")
var projectile_node: PackedScene = preload(\"res://scenes/projectile_chain.tscn\")
var splash_cone_angle: float = 360
var splashable = false
var chainable = false

func _ready() -> void:
	super()
	source_position = position

func _process(_delta):
	if global_position.distance_to(source_position) > max_distance:
		print(\"a projectile was freed\")
		queue_free()
		
func _on_screen_exited():
	pass



func _on_body_entered(body):
	super(body)
	if chainable:
		spawnChain(body)
	if splashable:
		spawnSplash(body, 9)

func spawnChain(_body):
	var new_projectile = projectile_node.instantiate()
	new_projectile.chain_limit = 5
	new_projectile.damage = damage
	new_projectile.position = global_position
	new_projectile.source = source
	new_projectile.speed = 0
	get_tree().current_scene.call_deferred(\"add_child\", new_projectile)
	new_projectile.call_deferred(\"chain_to_target\")
	
func spawnSplash(_body, num_splash_projectiles):
	for i in range(num_splash_projectiles):
		var splash_projectile_instance = projectile_node.instantiate()
		splash_projectile_instance.position = global_position # Spawn at the source's global position
		splash_projectile_instance.damage = damage # Inherit damage
		splash_projectile_instance.source = source # Inherit source
		splash_projectile_instance.speed = speed # Splash projectiles have speed
		#if splash_projectile_instance.splashable:
			#splash_projectile_instance.splashable = false
		# Calculate the angle for this splash projectile
		var angle_offset = deg_to_rad((float(i) / (num_splash_projectiles - 1) - 0.5) * splash_cone_angle) if num_splash_projectiles > 1 else 0.0
		var base_direction = Vector2.RIGHT.rotated(source.aim.global_rotation) # Get the forward direction of the aim
		var splash_direction = base_direction.rotated(angle_offset)
		splash_projectile_instance.direction = splash_direction
		get_tree().current_scene.call_deferred(\"add_child\",splash_projectile_instance)
"

[sub_resource type="CircleShape2D" id="CircleShape2D_bovob"]
resource_local_to_scene = true
radius = 22.0227

[sub_resource type="Gradient" id="Gradient_hd575"]
colors = PackedColorArray(0, 0.4, 0.992157, 1, 0.456204, 0.000208069, 0.479034, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_shbd3"]
gradient = SubResource("Gradient_hd575")

[sub_resource type="Curve" id="Curve_bovob"]
_data = [Vector2(0, 1), 0.0, 0.0, 0, 0, Vector2(0.0947867, 1), 0.0, 0.0, 0, 0, Vector2(1, 0), 0.0, 0.0, 0, 0]
point_count = 3

[sub_resource type="CurveTexture" id="CurveTexture_8x81n"]
curve = SubResource("Curve_bovob")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_8qaxw"]
particle_flag_disable_z = true
emission_shape = 1
emission_sphere_radius = 10.0
direction = Vector3(0, 1, 0)
initial_velocity_min = -10.0
initial_velocity_max = 10.0
gravity = Vector3(0, 0, 0)
scale_min = 3.0
scale_max = 3.0
scale_curve = SubResource("CurveTexture_8x81n")
color_ramp = SubResource("GradientTexture1D_shbd3")
turbulence_enabled = true
turbulence_influence_max = 0.196

[node name="ProjectileDisabledVOSE" instance=ExtResource("1_kyfj2")]
script = SubResource("GDScript_hd575")

[node name="Sprite2D" parent="." index="0"]
texture = ExtResource("2_hd575")

[node name="CollisionShape2D" parent="." index="1"]
shape = SubResource("CircleShape2D_bovob")

[node name="VisibleOnScreenEnabler2D" parent="." index="2"]
enable_node_path = NodePath("")

[node name="GPUParticles2D" type="GPUParticles2D" parent="." index="3"]
amount = 160
process_material = SubResource("ParticleProcessMaterial_8qaxw")
