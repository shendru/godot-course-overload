shader_type canvas_item;

uniform float hue_shift : hint_range(0.0, 1.0) = 0.0; // Hue shift from 0 to 1
uniform float flash_amount : hint_range(0.0, 1.0) = 0.0; // Flash intensity
uniform vec4 flash_color : source_color = vec4(1.0, 1.0, 1.0, 1.0); // Flash color

// RGB to HSV conversion
vec3 rgb2hsv(vec3 c) {
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));
    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

// HSV to RGB conversion
vec3 hsv2rgb(vec3 c) {
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void fragment() {
    vec4 base_color = texture(TEXTURE, UV);

    // Convert base color to HSV
    vec3 hsv = rgb2hsv(base_color.rgb);

    // Apply hue shift
    hsv.x = mod(hsv.x + hue_shift, 1.0);

    // Convert back to RGB
    vec3 shifted_rgb = hsv2rgb(hsv);

    // Apply flash effect
    vec3 final_color = mix(shifted_rgb, flash_color.rgb, flash_amount);

    // Preserve alpha
    COLOR = vec4(final_color, base_color.a);
}
